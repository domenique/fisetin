/*
 * Copyright 2015 TripleD Fisetin.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  ext {
    springBootVersion = '1.3.5.RELEASE'
  }
  repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/plugins-release' }
    jcenter()
  }
  dependencies {
    classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
    classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1")
    classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

// some global vars to determine the type of build.
ext {
  isDevBuild = false
  isCiBuild = false
  isReleaseBuild = false
  sonatypeRepositoryUrl = null
  sonatypeUsername = null
  sonatypePassword = null
}

apply plugin: 'com.github.kt3k.coveralls'

allprojects {
  apply plugin: 'jacoco'

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }

  jacoco {
    toolVersion = '0.7.1.201405082137'
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'signing'
  apply plugin: 'maven'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  group = 'io.tripled.fisetin'
  version = '0.0.2'

  //set build variables based on build type (release, continuous integration, development)
  sonatypeUsername = System.getenv('OSSRH_USERNAME')
  sonatypePassword = System.getenv('OSSRH_PASSWD')
  if (project.hasProperty("release")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
  } else if (project.hasProperty("ci")) {
    isCiBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
  } else {
    version += "-DEV"
    isDevBuild = true
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  if (isReleaseBuild) {
    signing {
      sign configurations.archives
    }
  } else {
    task signArchives {
      // do nothing
    }
  }

  jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
      html.enabled = true
      xml.enabled = true
      csv.enabled = false
    }
  }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
  dependsOn = subprojects.test
  additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(subprojects.sourceSets.main.output)
  executionData = files(subprojects.jacocoTestReport.executionData)
  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
  }
  onlyIf = {
    true
  }
  doFirst {
    executionData = files(executionData.findAll {
      it.exists()
    })
  }
}


coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
}
